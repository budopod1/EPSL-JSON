#import binjson;
#import textjson;
#import consolestyles;

JSONSpan {
    L:start,
    L:end
}

@super;
JSON {
    JSONSpan?:span
}

@extends JSON;
JSONBool {
    Bool:val
}

@extends JSON;
JSONDouble {
    Q:val
}

@extends JSON;
JSONInt {
    Z:val
}

@extends JSON;
JSONList {
    [:JSON]:items
}

@extends JSON;
JSONNull {

}

@extends JSON;
JSONObj {
    [Str]:keys,
    [:JSON]:values
}

@extends JSON;
JSONStr {
    Str:val
}

JSONParsingError {
    L:start_index,
    L:end_index,
    Str:message
}

JSONParsingResult {
    :JSON?:json,
    JSONParsingError?:error
}

:JSON#parse_BinJSON[Str:data] {
    if ([data].len == 0 || data[0] != 'B') {
        abort "Invalid BinJSON start";
    };

    [Str]:strs = [Str] [];
    BinParsingState:state = BinParsingState [1, strs];
    W:string_count = take_VW_uint[data][state];
    for (W:i to string_count) {
        W:string_len = take_VW_uint[data][state];
        [strs].append[take_bytes[data][state][string_len]];
    };

    Byte:initial_id = take_byte[data][state];
    :JSON:result = parse_BinJSON_val[initial_id][data][state];

    if ([data].len != state.i) {
        abort "Invalid BinJSON: parsing finished; more data avaliable";
    };

    return result;
}

JSONParsingResult#parse_txt_JSON[Str:txt] {
    return parse_txt_JSON_val[TxtParsingState [txt, 0]];
}

Bool#[:JSON:json].get_bool {
    return [(JSONBool?)json].unwrap.val;
}

Q#[:JSON:json].get_double {
    return [(JSONDouble?)json].unwrap.val;
}

Z#[:JSON:json].get_int {
    return [(JSONInt?)json].unwrap.val;
}

[:JSON]#[:JSON:json].get_list {
    return [(JSONList?)json].unwrap.items;
}

Bool#[:JSON:json].is_null {
    return ![(JSONNull?)json].is_null;
}

JSONObj#[:JSON:json].get_obj {
    return [(JSONObj?)json].unwrap;
}

Str#[:JSON:json].get_str {
    return [(JSONStr?)json].unwrap.val;
}

:JSON#[JSONObj:obj].get[Str:key] {
    if ([obj.keys].len != [obj.values].len) {
        abort "JSONObj number of keys and values must match";
    };
    for (W:i enumerating obj.keys) {
        if ([obj.keys[i]] equals [key]) {
            return obj.values[i];
        };
    };
    abort "Requested key '{}' not found" % key;
}

Bool#[JSONObj:obj].contains_key[Str:target_key] {
    for (Str:key in obj.keys) {
        if ([key] equals [target_key]) {
            return true;
        };
    };
    return false;
}

:JSON#[:JSON:obj].get[Str:key] {
    return [[obj].get_obj].get[key];
}

Bool#[:JSON:obj].contains_key[Str:target_key] {
    return [[obj].get_obj].contains_key[target_key];
}

Str#stringify error [JSONParsingError:error] in file [Str:file] with content [Str:txt] {
    [Str]:lines = [Str] [];
    Str:line = [""].clone;

    L:exerpt_start_line = 0;
    L:exerpt_start_col = 0;
    L:exerpt_end_line = 0;
    L:exerpt_end_col = 0;

    for (L:i enumerating txt) {
        Byte:byte = txt[i];
        if (error.start_index == i) {
            exerpt_start_line = [lines].len;
            exerpt_start_col = [line].len;
        };
        if (error.end_index == i) {
            exerpt_end_line = [lines].len;
            exerpt_end_col = [line].len;
        };
        if (byte == '\n') {
            [lines].append[line];
            line = [""].clone;
        } else {
            [line].append[byte];
        };
    };
    [lines].append[line];

    if (error.start_index >= [txt].len) {
        exerpt_start_line = [lines].len - 1;
        exerpt_start_col = 0;
    };
    if (error.end_index >= [txt].len) {
        exerpt_end_line = [lines].len - 1;
        exerpt_end_col = 0;
    };

    Str:result = [""].clone;
    [result].extend[style ["Error at "] with [TXT_RED]];
    Str:location = "\"{}\", line {}" % file % (exerpt_start_line+1);
    [result].extend[style [location] with [TXT_CYAN]];
    [result].extend[style [": "] with [TXT_RED]];
    [result].extend[error.message];
    [result].append['\n'];

    if (exerpt_start_line == exerpt_end_line) {
        Str:line = lines[exerpt_start_line];
        [result].extend[line];
        [result].append['\n'];

        L:offset_size = estimate monospace len of
            [[line].slice[0][exerpt_start_col]];
        [result].extend[[" "].repeat[offset_size]];

        L:exerpt_size = estimate monospace len of
            [[line].slice[exerpt_start_col][exerpt_end_col+1]];
        Str:pointer_txt = "^";
        if (exerpt_size >= 2) {
            pointer_txt = "┗{}┛" % ["━"].repeat[exerpt_size - 2];
        };
        [result].extend[style [pointer_txt] with [TXT_LIGHT_GREEN]];
        [result].append['\n'];
    } else {
        L:surrounding_lines = 1;
        L:first_shown_line = 0;
        if (exerpt_start_line > surrounding_lines) {
            first_shown_line = exerpt_start_line - surrounding_lines;
        };
        L:last_shown_line = exerpt_end_line + surrounding_lines;
        if (last_shown_line >= [lines].len) {
            last_shown_line = [lines].len - 1;
        };

        L:max_line_no_len = [[last_shown_line+1].stringify].len;
        for (L:line_index from first_shown_line to last_shown_line+1) {
            Str:line_no_str = [line_index+1].stringify;
            [line_no_str].left_pad[max_line_no_len][' '];
            [result].extend[style [line_no_str] with [TXT_LIGHT_BLUE]];
            [result].append[' '];

            Str:prefix = "  ";
            if (line_index > exerpt_start_line && line_index < exerpt_end_line) {
                prefix = "┃ ";
            } elif (line_index == exerpt_start_line) {
                prefix = "┏╸";
            } elif (line_index == exerpt_end_line) {
                prefix = "┗╸";
            };
            [result].extend[style [prefix] with [TXT_LIGHT_GREEN]];

            [result].extend[lines[line_index]];
            [result].append['\n'];
        };
    };

    return result;
}
