$import json;
$import conversion;

BinParsingState {
    W:i,
    [Str]:strs
}

W#take_VW_uint[Str:data][BinParsingState:state] {
    W:result = 0;
    W:shift = 0;
    while (true) {
        if ([data].len == state.i) {
            abort "Invalid BinJSON VW int";
        };
        Byte:curByte = data[state.i++];
        result += [[(W)curByte] & [127]] << [shift];
        shift += 7;
        if ([curByte] & [128] == 0) {
            return result;
        };
    };
}

Str#take_Str[Str:data][BinParsingState:state] {
    W:idx = take_VW_uint[data][state];
    if (idx >= [state.strs].len) {
        abort "Invalid BinJSON string index";
    };
    return state.strs[idx];
}

Str#take_bytes[Str:data][BinParsingState:state][W:count] {
    W:start = state.i;
    state.i += count;
    if (state.i > [data].len) {
        abort "Invalid BinJSON";
    };
    return [data].slice[start][state.i];
}

Byte#take_byte[Str:data][BinParsingState:state] {
    if ([data].len == state.i) {
        abort "Invalid BinJSON";
    };
    return data[state.i++];
}

JSONBool#parse_BinJSONBool[Str:data][BinParsingState:state] {
    return JSONBool [/*span:*/null, (Bool)take_byte[data][state]];
}

JSONDouble#parse_BinJSONDouble[Str:data][BinParsingState:state] {
    Q:val = unpack_Q64[data][state.i];
    state.i += 8;
    return JSONDouble [/*span:*/null, val];
}

JSONInt#parse_BinJSONInt[Str:data][BinParsingState:state] {
    return JSONInt [/*span:*/null, (Z)take_VW_uint[data][state]];
}

JSONList#parse_BinJSONList[Str:data][BinParsingState:state] {
    W:len = take_VW_uint[data][state];
    [:JSON]:items = [:JSON] [];
    if (len > 0) {
        Byte:sub_id = take_byte[data][state];
        for (W:i to len) {
            [items].append[parse_BinJSON_val[sub_id][data][state]];
        };
    };
    return JSONList [/*span:*/null, items];
}

JSONList#parse_BinJSONList_multityped[Str:data][BinParsingState:state] {
    W:len = take_VW_uint[data][state];
    [:JSON]:items = [:JSON] [];
    if (len > 0) {
        for (W:i to len) {
            Byte:sub_id = take_byte[data][state];
            [items].append[parse_BinJSON_val[sub_id][data][state]];
        };
    };
    return JSONList [/*span:*/null, items];
}

JSONObj#parse_BinJSONObj[Str:data][BinParsingState:state] {
    W:len = take_VW_uint[data][state];
    [Str]:keys = [Str] [];
    [:JSON]:values = [:JSON] [];
    for (W:i to len) {
        [keys].append[take_Str[data][state]];
        Byte:val_id = take_byte[data][state];
        [values].append[parse_BinJSON_val[val_id][data][state]];
    };
    return JSONObj [/*span:*/null, keys, values];
}

JSONStr#parse_BinJSONStr[Str:data][BinParsingState:state] {
    return JSONStr [/*span:*/null, take_Str[data][state]];
}

:JSON#parse_BinJSON_val[Byte:id][Str:data][BinParsingState:state] {
    switch (id)
    (1) {
        return parse_BinJSONBool[data][state];
    }
    (2) {
        return parse_BinJSONDouble[data][state];
    }
    (3) {
        return parse_BinJSONInt[data][state];
    }
    (4) {
        return parse_BinJSONList[data][state];
    }
    (5) {
        return JSONNull [/*span:*/null];
    }
    (6) {
        return parse_BinJSONObj[data][state];
    }
    (7) {
        return parse_BinJSONStr[data][state];
    }
    (8) {
        return parse_BinJSONList_multityped[data][state];
    }
    {
        abort "Invalid BinJSON ID";
    };
}
